.profile-pic{
  display: block;
  margin: auto;
  justify-self: center;
  align-self: center;
  transition: 1s;
  transition-timing-function: linear;
  max-height: 200px;
  max-width: 200px;
  margin-top: 20px;
  margin-bottom: 20px;
  .profile-svg{
    animation: agitate 10s linear 0s infinite;
  }
  .hexagon-path{
    //Transforms the clip path from the Center of the shape.
    transform-box: fill-box;
    transform-origin: center;
  }
  .profile-img *{
      //Transforms the clip path from the Center of the shape.
      transform-box: fill-box;
      transform-origin: center;
  }
  image{
    -webkit-clip-path: url('#hexagon-clip');
    clip-path: url("#hexagon-clip");
  }
}

.hex-svg{
  position: fixed;
  top: 0;
  left: 0;
  // transform: scale(.01, .01);
}
.hexagon-clip{
  width: 100%; 
}
#hex-svg-1 clipPath{
  transform: translate(13.5px,0px);
}
#hex-svg-2 clipPath{
  transform: translate(8px,0px);
}
/* This may seem like a strange inclusion.
   Because WebKit tries to avoid redrawing the rotating hexagon SVG, the animation ends up looking choppy,
   or not working at all. 
   
   CSS properties such as 'will-change' look to help fix this by hinting to the browser when redraws 
   are required. However, there isn't a lot of support for animating parts of an SVG with this method
   (or other Javascript ones I've seen).
   
   Forcing graphical redraws via an imperceptible animation such as this does the trick. 
   
   Spaghetti? Yes!
   Solving problems and arriving at a deeper understanding of the underlying systems? Also Yes!
*/
@keyframes agitate{
  0%{
    padding: 0px;
  }
  100%{
    padding: .1px;
  }
}